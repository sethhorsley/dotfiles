#!/bin/bash

# Install SSH Keys from 1Password
# Reads configuration from ~/.config/secrets.yaml

set -e

SECRETS_FILE="$HOME/.config/secrets.yaml"

echo "Installing SSH keys from 1Password..."

# Check if secrets file exists
if [ ! -f "$SECRETS_FILE" ]; then
    echo ""
    echo "ERROR: Secrets file not found at $SECRETS_FILE"
    echo ""
    echo "Please create it with the following format:"
    echo ""
    echo "onepassword:"
    echo "  ssh_key:"
    echo "    vault: \"your-vault-name\""
    echo "    item_id: \"your-item-id\""
    echo "  # Optional:"
    echo "  # service_account_token: \"your-token\""
    echo ""
    echo "Then set permissions: chmod 600 $SECRETS_FILE"
    exit 1
fi

# Check permissions
PERMS=$(stat -c "%a" "$SECRETS_FILE" 2>/dev/null || stat -f "%A" "$SECRETS_FILE" 2>/dev/null)
if [ "$PERMS" != "600" ]; then
    echo "WARNING: Secrets file has permissions $PERMS, should be 600"
    echo "Run: chmod 600 $SECRETS_FILE"
fi

# Check if op CLI is installed
if ! command -v op &> /dev/null; then
    echo "ERROR: 1Password CLI (op) is not installed."
    echo "Install it first:"
    echo "  macOS: brew install 1password-cli"
    echo "  Linux: See https://developer.1password.com/docs/cli/get-started/"
    exit 1
fi

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo "ERROR: jq is not installed."
    echo "Install it first:"
    echo "  macOS: brew install jq"
    echo "  Linux: sudo apt install jq"
    exit 1
fi

# Parse secrets file
# Try yq first (YAML parser), fallback to grep/awk
if command -v yq &> /dev/null; then
    VAULT_NAME=$(yq eval '.onepassword.ssh_key.vault' "$SECRETS_FILE" 2>/dev/null)
    SSH_KEY_ITEM=$(yq eval '.onepassword.ssh_key.item_id' "$SECRETS_FILE" 2>/dev/null)
    SERVICE_TOKEN=$(yq eval '.onepassword.service_account_token' "$SECRETS_FILE" 2>/dev/null)
else
    # Fallback: Simple grep/awk parsing
    VAULT_NAME=$(grep -A2 "ssh_key:" "$SECRETS_FILE" | grep "vault:" | awk '{print $2}' | tr -d '"')
    SSH_KEY_ITEM=$(grep -A2 "ssh_key:" "$SECRETS_FILE" | grep "item_id:" | awk '{print $2}' | tr -d '"')
    SERVICE_TOKEN=$(grep "service_account_token:" "$SECRETS_FILE" | awk '{print $2}' | tr -d '"')
fi

# Validate required values
if [ -z "$VAULT_NAME" ] || [ "$VAULT_NAME" = "null" ]; then
    echo "ERROR: vault not found in secrets file"
    exit 1
fi

if [ -z "$SSH_KEY_ITEM" ] || [ "$SSH_KEY_ITEM" = "null" ]; then
    echo "ERROR: item_id not found in secrets file"
    exit 1
fi

# Set service account token if provided
if [ -n "$SERVICE_TOKEN" ] && [ "$SERVICE_TOKEN" != "null" ]; then
    export OP_SERVICE_ACCOUNT_TOKEN="$SERVICE_TOKEN"
    echo "✓ Using service account token from secrets file"
fi

# Check if authenticated to 1Password
if ! op whoami &> /dev/null; then
    echo ""
    echo "ERROR: Not authenticated to 1Password"
    echo ""
    echo "Options:"
    echo "1. Add service_account_token to $SECRETS_FILE"
    echo "2. Use desktop app (macOS): Enable CLI integration in 1Password settings"
    echo "3. Manual signin: eval \$(op signin)"
    exit 1
fi

echo "✓ Authenticated to 1Password"

# Create .ssh directory if it doesn't exist
mkdir -p ~/.ssh
chmod 700 ~/.ssh

echo "Fetching SSH key from 1Password..."
echo "  Vault: $VAULT_NAME"
echo "  Item: $SSH_KEY_ITEM"

# Get the full item as JSON with revealed secrets
ITEM_JSON=$(op item get "$SSH_KEY_ITEM" --vault "$VAULT_NAME" --reveal --format json 2>&1)

if [ $? -ne 0 ]; then
    echo ""
    echo "ERROR: Failed to fetch SSH key from 1Password"
    echo "$ITEM_JSON"
    exit 1
fi

# Try to extract the private key field
echo "$ITEM_JSON" | jq -r '.fields[] | select(.label == "private key") | .value' > ~/.ssh/key_temp 2>/dev/null

# If that didn't work, try other possible field labels
if [ ! -s ~/.ssh/key_temp ]; then
    echo "$ITEM_JSON" | jq -r '.fields[] | select(.label == "private_key") | .value' > ~/.ssh/key_temp 2>/dev/null
fi

# If still empty, try to get any concealed field
if [ ! -s ~/.ssh/key_temp ]; then
    echo "$ITEM_JSON" | jq -r '.fields[] | select(.type == "CONCEALED") | .value' > ~/.ssh/key_temp 2>/dev/null
fi

if [ ! -s ~/.ssh/key_temp ]; then
    rm -f ~/.ssh/key_temp
    echo "ERROR: Could not extract private key from 1Password item"
    echo ""
    echo "Available fields:"
    echo "$ITEM_JSON" | jq -r '.fields[] | "\(.label) (\(.type))"'
    exit 1
fi

echo "✓ Private key extracted"

# Detect key type from the private key content
KEY_TYPE=""
if grep -q "BEGIN RSA PRIVATE KEY" ~/.ssh/key_temp; then
    KEY_TYPE="rsa"
elif grep -q "BEGIN OPENSSH PRIVATE KEY" ~/.ssh/key_temp; then
    # Check if it's RSA or Ed25519 in OpenSSH format
    if ssh-keygen -l -f ~/.ssh/key_temp 2>/dev/null | grep -q "RSA"; then
        KEY_TYPE="rsa"
    elif ssh-keygen -l -f ~/.ssh/key_temp 2>/dev/null | grep -q "ED25519"; then
        KEY_TYPE="ed25519"
    else
        KEY_TYPE="rsa"  # Default to rsa
    fi
else
    KEY_TYPE="rsa"  # Default to rsa if we can't detect
fi

# Set the appropriate filename
KEY_FILE="id_${KEY_TYPE}"

echo "✓ Detected key type: $KEY_TYPE"

# Move to the correct location
mv ~/.ssh/key_temp ~/.ssh/${KEY_FILE}
chmod 600 ~/.ssh/${KEY_FILE}

echo "✓ SSH private key installed to ~/.ssh/${KEY_FILE}"

# Get the public key if available (using the same JSON data)
echo "$ITEM_JSON" | jq -r '.fields[] | select(.label == "public key") | .value' > ~/.ssh/${KEY_FILE}.pub_temp 2>/dev/null

# Try alternative field names if needed
if [ ! -s ~/.ssh/${KEY_FILE}.pub_temp ]; then
    echo "$ITEM_JSON" | jq -r '.fields[] | select(.label == "public_key") | .value' > ~/.ssh/${KEY_FILE}.pub_temp 2>/dev/null
fi

# If still no public key, generate it from the private key
if [ ! -s ~/.ssh/${KEY_FILE}.pub_temp ]; then
    echo "Generating public key from private key..."
    ssh-keygen -y -f ~/.ssh/${KEY_FILE} > ~/.ssh/${KEY_FILE}.pub_temp 2>/dev/null
fi

if [ -s ~/.ssh/${KEY_FILE}.pub_temp ]; then
    mv ~/.ssh/${KEY_FILE}.pub_temp ~/.ssh/${KEY_FILE}.pub
    chmod 644 ~/.ssh/${KEY_FILE}.pub
    echo "✓ SSH public key installed to ~/.ssh/${KEY_FILE}.pub"
else
    rm -f ~/.ssh/${KEY_FILE}.pub_temp
    echo "⚠ Warning: Could not get public key, but private key is installed"
fi

echo ""
echo "======================================================================"
echo "✓ SSH key installation complete!"
echo ""
echo "Private key: ~/.ssh/${KEY_FILE}"
[ -f ~/.ssh/${KEY_FILE}.pub ] && echo "Public key:  ~/.ssh/${KEY_FILE}.pub"
echo "======================================================================"
